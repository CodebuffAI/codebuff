#!/bin/bash

# Common bun installation paths to check
BUN_PATHS=(
    "/opt/homebrew/bin/bun"
    "/usr/local/bin/bun"
    "$HOME/.bun/bin/bun"
)

# Find the real bun executable
REAL_BUN=""
for path in "${BUN_PATHS[@]}"; do
    if [ -f "$path" ]; then
        REAL_BUN="$path"
        break
    fi
done

# Fallback: try to find bun in PATH excluding our directory
if [ -z "$REAL_BUN" ]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    REAL_BUN=$(PATH=$(echo "$PATH" | tr ':' '\n' | grep -v "^$SCRIPT_DIR$" | tr '\n' ':') which bun)
fi

# Function to check if a script needs secrets by looking in package.json
needs_secrets() {
    local script_name="$1"
    local cwd="${2:-.}"

    # Check if package.json exists in the specified directory
    if [ ! -f "$cwd/package.json" ]; then
        return 1  # No package.json, assume no secrets needed
    fi

    # Extract the script command from package.json
    local script_command
    script_command=$(node -pe "
        try {
            const pkg = require('$cwd/package.json');
            const script = pkg.scripts && pkg.scripts['$script_name'];
            script || '';
        } catch (e) {
            '';
        }
    " 2>/dev/null)

    # If script doesn't exist, assume no secrets needed
    if [ -z "$script_command" ]; then
        return 1
    fi

    # Check if script needs secrets:
    # 1. Already uses infisical
    # 2. Contains dev server patterns that obviously need secrets
    case "$script_command" in
        *"infisical"*)
            return 0  # Already uses infisical, needs secrets
            ;;
        *"dev"*|*"start"*|*"studio"*|*"db:start"*|*"db:studio"*)
            return 0  # Dev servers and database tools need secrets
            ;;
        *)
            return 1  # Default to no secrets for maintainability
            ;;
    esac
}

# Function to extract cwd from bun command
get_cwd_from_args() {
    local args=("$@")
    for ((i=0; i<${#args[@]}; i++)); do
        if [[ "${args[i]}" == "--cwd" && $((i+1)) -lt ${#args[@]} ]]; then
            echo "${args[$((i+1))]}"
            return
        fi
    done
    echo "."
}

# Main logic
case "$1" in
  "test")
    # Tests often need database/API access
    exec infisical run -- "$REAL_BUN" "$@"
    ;;
  "dev"|"start")
    # Development servers need secrets
    exec infisical run -- "$REAL_BUN" "$@"
    ;;
  "run")
    if [ -n "$2" ]; then
        # Extract cwd if specified
        cwd=$(get_cwd_from_args "$@")

        # Check if the script needs secrets
        if needs_secrets "$2" "$cwd"; then
            exec infisical run -- "$REAL_BUN" "$@"
        else
            exec "$REAL_BUN" "$@"
        fi
    else
        # No script specified, run without secrets
        exec "$REAL_BUN" "$@"ggp -
    fi
    ;;
  *)
    # Check if the first argument is a script name in package.json
    if needs_secrets "$1" "."; then
        exec infisical run -- "$REAL_BUN" "$@"
    else
        # For install, add, remove, format, etc. - no secrets needed
        exec "$REAL_BUN" "$@"
    fi
    ;;
esac
