#!/bin/bash

# Common bun installation paths to check
BUN_PATHS=(
    "/opt/homebrew/bin/bun"
    "/usr/local/bin/bun"
    "$HOME/.bun/bin/bun"
)

# Find the real bun executable
REAL_BUN=""
for path in "${BUN_PATHS[@]}"; do
    if [ -f "$path" ]; then
        REAL_BUN="$path"
        break
    fi
done

# Fallback: try to find bun in PATH excluding our directory
if [ -z "$REAL_BUN" ]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    REAL_BUN=$(PATH=$(echo "$PATH" | tr ':' '\n' | grep -v "^$SCRIPT_DIR$" | tr '\n' ':') which bun)
fi

# Function to check if command doesn't need secrets
# Returns 0 if secrets are NOT needed, 1 if they ARE needed
doesnt_need_secrets() {
    # Find the first non-flag argument, which is the command
    local cmd=""
    for arg in "$@"; do
        if [[ ! "$arg" =~ ^- ]]; then
            cmd="$arg"
            break
        fi
    done

    # Handle version/help flags which can appear anywhere
    for arg in "$@"; do
        case "$arg" in
            --version|-v|--help|-h|--revision)
                return 0
                ;;
        esac
    done

    # If no command is found (e.g., just 'bun'), it doesn't need secrets
    if [ -z "$cmd" ]; then
        return 0
    fi

    # Commands that don't need secrets
    case "$cmd" in
        # Package management
        install|i|add|remove|rm|link|unlink|pm|update|upgrade)
            return 0
            ;;
        # Project initialization
        init|create)
            return 0
            ;;
        # Info/utility
        info|outdated|audit|typecheck)
            return 0
            ;;
        # Run command needs special handling
        run)
            # Find the script name after 'run'
            local script=""
            local found_run=false
            for arg in "$@"; do
                if $found_run && [[ ! "$arg" =~ ^- ]]; then
                    script="$arg"
                    break
                fi
                if [[ "$arg" == "run" ]]; then
                    found_run=true
                fi
            done

            # 'bun run' with no script lists scripts, no secrets needed
            if [ -z "$script" ]; then
                return 0
            fi

            # Scripts that typically don't need secrets
            case "$script" in
                format|lint|typecheck|compile)
                    return 0
                    ;;
                *)
                    # Default run scripts to needing secrets
                    return 1
                    ;;
            esac
            ;;
        *)
            # Default to needing secrets for all other commands
            return 1
            ;;
    esac
}

# Main logic - default to using infisical unless command doesn't need secrets
if doesnt_need_secrets "$@"; then
    exec "$REAL_BUN" "$@"
else
    exec infisical run -- "$REAL_BUN" "$@"
fi
