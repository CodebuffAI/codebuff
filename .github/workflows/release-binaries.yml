name: Release Binaries

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (patch, minor, major, or specific version like 1.2.3)'
        required: true
        type: string
        default: 'patch'

permissions:
  contents: write

jobs:
  # First job: Calculate new version and update package files
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.16'

      # Cache dependencies for speed
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb') }}
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Calculate and update version
        id: bump_version
        run: |
          cd npm-app
          
          # Get current version from package.release.json
          CURRENT_VERSION=$(node -p "require('./package.release.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version
          VERSION_TYPE="${{ inputs.version_type }}"
          if [[ "$VERSION_TYPE" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            NEW_VERSION="$VERSION_TYPE"
          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "$VERSION_TYPE" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch"|*)
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.release.json with new version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.release.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.release.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
      - name: Upload updated package
        uses: actions/upload-artifact@v4
        with:
          name: updated-package
          path: npm-app/package.release.json

  build-binaries:
    needs: prepare-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            binary: codebuff
            bun_target: bun-linux-x64
            platform: linux
            arch: x64
          - os: ubuntu-latest
            target: linux-arm64
            binary: codebuff
            bun_target: bun-linux-arm64
            platform: linux
            arch: arm64
          - os: macos-13
            target: darwin-x64
            binary: codebuff
            bun_target: bun-darwin-x64
            platform: darwin
            arch: x64
          - os: macos-14
            target: darwin-arm64
            binary: codebuff
            bun_target: bun-darwin-arm64
            platform: darwin
            arch: arm64
          - os: windows-latest
            target: win32-x64
            binary: codebuff.exe
            bun_target: bun-windows-x64
            platform: win32
            arch: x64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.16'

      # Cache dependencies for speed
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('**/bun.lockb') }}
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set environment variables
        env:
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}
        shell: bash
        run: |
          VAR_NAMES=$(node scripts/generate-ci-env.js)
          echo "$SECRETS_CONTEXT" | jq -r --argjson vars "$VAR_NAMES" '
            to_entries | .[] | select(.key as $k | $vars | index($k)) | .key + "=" + .value
          ' >> $GITHUB_ENV
          echo "CODEBUFF_GITHUB_ACTIONS=true" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_CB_ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "CODEBUFF_GITHUB_TOKEN=${{ secrets.CODEBUFF_GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Build binary
        run: bun run scripts/build-binary.js
        working-directory: npm-app
        shell: bash
        env:
          VERBOSE: true
          OVERRIDE_TARGET: ${{ matrix.bun_target }}
          OVERRIDE_PLATFORM: ${{ matrix.platform }}
          OVERRIDE_ARCH: ${{ matrix.arch }}

      - name: Test binary
        run: |
          cd npm-app/bin
          echo "Testing binary..."
          # Only test if we're building for the native architecture
          if [[ "${{ matrix.platform }}" == "linux" && "${{ matrix.arch }}" == "arm64" && "${{ runner.arch }}" != "ARM64" ]]; then
            echo "Skipping test for cross-compiled ARM64 binary"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            ./codebuff.exe --version
          else
            ./codebuff --version
          fi
        shell: bash

      - name: Zip on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "npm-app/bin/${{ matrix.binary }}" `
                           -DestinationPath "codebuff-${{ matrix.target }}.zip"

      - name: Tar on Unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          tar -czf codebuff-${{ matrix.target }}.tar.gz -C npm-app/bin ${{ matrix.binary }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: codebuff-${{ matrix.target }}
          path: codebuff-${{ matrix.target }}.*

  # Create GitHub release with all binaries
  create-release:
    needs: [prepare-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Download updated package
        uses: actions/download-artifact@v4
        with:
          name: updated-package
          path: ./

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.new_version }}
          name: Release v${{ needs.prepare-release.outputs.new_version }}
          body: |
            ## Codebuff v${{ needs.prepare-release.outputs.new_version }}
            
            Binary releases for all supported platforms.
            
            ### Installation
            ```bash
            npm install -g codebuff
            ```
            
            ### Platform Binaries
            - `codebuff-linux-x64.tar.gz` - Linux x64
            - `codebuff-linux-arm64.tar.gz` - Linux ARM64
            - `codebuff-darwin-x64.tar.gz` - macOS Intel
            - `codebuff-darwin-arm64.tar.gz` - macOS Apple Silicon
            - `codebuff-win32-x64.zip` - Windows x64
          files: |
            binaries/*/codebuff-*
          repository: CodebuffAI/codebuff-community
          token: ${{ secrets.CODEBUFF_GITHUB_TOKEN }}

  # Publish npm package using package.release.json
  publish-npm:
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download updated package
        uses: actions/download-artifact@v4
        with:
          name: updated-package
          path: npm-app/

      - name: Set up Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Prepare package for publishing
        run: |
          cd npm-app
          # Replace package.json with package.release.json for publishing
          cp package.release.json package.json

      - name: Publish to npm
        run: |
          cd npm-app
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Commit version changes only after successful publishing
  commit-release:
    needs: [prepare-release, publish-npm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download updated package
        uses: actions/download-artifact@v4
        with:
          name: updated-package
          path: npm-app/

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push version bump
        run: |
          git stash
          git pull --rebase origin improve-build
          git stash pop
          git add npm-app/package.release.json
          git commit -m "Bump version to ${{ needs.prepare-release.outputs.new_version }}"
          git push

      - name: Create and push tag
        run: |
          git tag "v${{ needs.prepare-release.outputs.new_version }}"
          git push origin "v${{ needs.prepare-release.outputs.new_version }}"
