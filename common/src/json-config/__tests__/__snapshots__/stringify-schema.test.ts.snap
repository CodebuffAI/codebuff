// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`stringifySchema should correctly stringify StartupProcessSchema 1`] = `
"// Defines a single startup process.
{
  // A user-friendly name for the process. Should be one word and unique.
  "name": string,

  // The actual shell command to execute.
  "command": string,

  // (optional): The working directory from which to run the command.
  "cwd": string | undefined,

  // (optional): Whether this process should be run, default: true
  "enabled": boolean | undefined,

  // (optional): Path to write the process's stdout. If not specified, stderr is not stored.
  "stdoutFile": string | undefined,

  // (optional): Path to write the process's stderr. If not specified, stderr will be put into the stdoutFile.
  "stderrFile": string | undefined
}"
`;

exports[`stringifySchema should correctly stringify CodebuffConfigSchema 1`] = `
"// Defines the overall Codebuff configuration file (e.g., codebuff.json). This schema defines the top-level structure of the configuration. This schema can be found at https://www.codebuff.com/config
{
  // (optional): Does nothing. Put any thing you want here!
  "description": any | undefined,

  // (optional): An array of startup processes.
  "startupProcesses": [

    // Defines a single startup process.
    {
      // A user-friendly name for the process. Should be one word and unique.
      "name": string,

      // The actual shell command to execute.
      "command": string,

      // (optional): The working directory from which to run the command.
      "cwd": string | undefined,

      // (optional): Whether this process should be run, default: true
      "enabled": boolean | undefined,

      // (optional): Path to write the process's stdout. If not specified, stderr is not stored.
      "stdoutFile": string | undefined,

      // (optional): Path to write the process's stderr. If not specified, stderr will be put into the stdoutFile.
      "stderrFile": string | undefined
    }
  ] | undefined,

  // (optional): An array of commands to run on file changes.
  "fileChangeHooks": [

    // Defines a single file change hook.
    {
      // A user-friendly name for the hook. Should be one word and unique.
      "name": string,

      // The actual shell command to execute.
      "command": string,

      // (optional): The working directory from which to run the command.
      "cwd": string | undefined,

      // (optional): Glob pattern to match files.
      "filePattern": string | undefined,

      // (optional): Whether this command should be run, default: true
      "enabled": boolean | undefined
    }
  ] | undefined,

  // (optional): Maximum number of turns agent will take before being forced to end, default: 12
  "maxAgentSteps": number,

  // (optional): Specify default base agent
  "baseAgent": string | undefined,

  // (optional): Specify complete list of spawnable agents for the base agent
  "spawnableAgents": [

  string
  ] | undefined
}"
`;

exports[`stringifySchema should handle a more complex schema 1`] = `
"// A complex test schema
{
  // Unique identifier
  "id": string,

  // A positive integer count
  "count": number,

  // Activity status
  "isActive": boolean,

  // (optional): Optional list of tags
  "tags": [

  string
  ] | undefined,

  // A nested object structure
  "nested": {
  "value": string,

  // Nested configuration
  "config": {
  // (optional): Number of retries, default: 3
  "retries": number
}
}
}"
`;

exports[`stringifySchema should handle an empty object schema 1`] = `
"// An empty schema
{
}"
`;

exports[`stringifySchema should handle schema with only optional fields 1`] = `
"// Schema with only optional fields
{
  // (optional): Optional field 1
  "field1": string | undefined,

  // (optional): Optional field 2
  "field2": number | undefined
}"
`;

exports[`stringifySchema should handle schema with default values 1`] = `
"// Schema demonstrating default values
{
  // (optional): Name with default, default: "anonymous"
  "name": string,

  // (optional): Level with default, default: 1
  "level": number,

  // (optional): Enabled with default, default: false
  "enabled": boolean
}"
`;
