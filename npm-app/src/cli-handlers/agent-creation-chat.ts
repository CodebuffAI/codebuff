import { enterMiniChat } from './mini-chat'
import * as fs from 'fs'
import * as path from 'path'
import { getProjectRoot } from '../project-files'
import { green, gray } from 'picocolors'

interface AgentRequirements {
  name: string
  purpose: string
  specialty: string
  model: string
}

const AGENT_CREATION_STEPS = [
  {
    question: "Hi! I'll help you create a custom agent. What would you like to name your agent?",
    field: 'name',
    placeholder: 'e.g., "Code Reviewer", "API Helper", "Test Generator"'
  },
  {
    question: "Great! What's the main purpose of this agent? What should it help you with?",
    field: 'purpose',
    placeholder: 'e.g., "Review code for best practices", "Help with API integration"'
  },
  {
    question: "What's this agent's specialty or domain expertise?",
    field: 'specialty',
    placeholder: 'e.g., "React development", "Database optimization", "Security auditing"'
  },
  {
    question: "Which model should this agent use? (Press Enter for default: claude-3-5-sonnet-20241022)",
    field: 'model',
    placeholder: 'claude-3-5-sonnet-20241022, gpt-4o, gemini-2.0-flash-exp',
    defaultValue: 'claude-3-5-sonnet-20241022'
  }
]

export function startAgentCreationChat(
  rl: any,
  onExit: () => void,
  onComplete: (requirements: AgentRequirements) => void
) {
  enterMiniChat(rl, onExit, {
    title: 'ðŸ¤– Agent Creation Assistant',
    steps: AGENT_CREATION_STEPS,
    onComplete: (responses) => {
      const requirements: AgentRequirements = {
        name: responses.name || 'My Custom Agent',
        purpose: responses.purpose || 'A custom agent that helps with development tasks',
        specialty: responses.specialty || 'general development',
        model: responses.model || 'claude-3-5-sonnet-20241022'
      }
      onComplete(requirements)
    }
  })
}

export function generateAgentFromRequirements(requirements: AgentRequirements): string {
  const agentName = requirements.name
  const agentId = agentName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '')
  const purpose = requirements.purpose
  const specialty = requirements.specialty
  const model = requirements.model
  
  return `import { AgentConfig } from './agent-template.d.ts'

/**
 * ${agentName}
 * 
 * ${purpose}
 */

const config: AgentConfig = {
  // Basic Information
  id: '${agentId}',
  name: '${agentName}',
  purpose: '${purpose}',
  model: '${model}',
  
  // System prompt - defines the agent's personality and expertise
  systemPrompt: \`You are ${agentName}, a specialized AI assistant focused on ${specialty}.

Your role is to:
- ${purpose}
- Provide expert guidance in ${specialty}
- Be concise, practical, and helpful
- Focus on actionable solutions

Always maintain a professional yet friendly tone and ask clarifying questions when needed.\`,
  
  // Tools - common file editing and analysis tools
  tools: ['read_files', 'write_file', 'str_replace', 'code_search', 'end_turn'],
  
  // Optional: Sub-agents this agent can spawn for complex tasks
  spawnableAgents: ['file_picker', 'researcher', 'thinker', 'reviewer'],
}

export default config

/**
 * Generated by Codebuff Agent Creation Assistant
 * 
 * To customize this agent further:
 * 1. Modify the systemPrompt to adjust behavior
 * 2. Add or remove tools based on your needs
 * 3. Uncomment and implement handleSteps for programmatic control
 * 4. Restart Codebuff to use your new agent
 */
`
}

export function createAgentFromRequirements(requirements: AgentRequirements) {
  const agentsDir = path.join(getProjectRoot(), '.agents', 'templates')

  // Ensure directory exists
  if (!fs.existsSync(agentsDir)) {
    fs.mkdirSync(agentsDir, { recursive: true })
  }

  // Generate agent content from requirements
  const agentContent = generateAgentFromRequirements(requirements)

  // Create filename from agent name
  const agentName = requirements.name
  const baseFilename = agentName
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')

  // Find next available filename
  let counter = 1
  let filename = `${baseFilename}.ts`
  while (fs.existsSync(path.join(agentsDir, filename))) {
    filename = `${baseFilename}-${counter}.ts`
    counter++
  }

  const filePath = path.join(agentsDir, filename)

  // Copy agent template types if they don't exist
  ensureAgentTemplateTypes(agentsDir)

  // Write the agent file
  fs.writeFileSync(filePath, agentContent)

  console.log(green(`\nCreated new agent: ${requirements.name}`))
  console.log(gray(`File: ${filePath}`))
  console.log(gray('Restart Codebuff to use your new agent.'))
}

function ensureAgentTemplateTypes(agentsDir: string) {
  const agentDtsPath = path.join(agentsDir, 'agent-template.d.ts')
  if (fs.existsSync(agentDtsPath)) {
    return // Already exists
  }

  // Try to copy from common package
  const templatePath = path.join(
    getProjectRoot(),
    'common',
    'src',
    'templates',
    'agent-template.d.ts'
  )

  try {
    const templateContent = fs.readFileSync(templatePath, 'utf8')
    fs.writeFileSync(agentDtsPath, templateContent)
  } catch (error) {
    // Fallback inline types
    const fallbackTypes = `// Basic agent configuration types
export interface AgentConfig {
  id: string
  name: string
  purpose: string
  model: string
  systemPrompt: string
  tools?: string[]
  spawnableAgents?: string[]
  handleSteps?: string
}
`
    fs.writeFileSync(agentDtsPath, fallbackTypes)
  }
}